okay I want to build a new app tab for my POD_workflow
I prepared the key on the .env added the
I also added
COMFY_API_URL="https://www.comfydeploy.com"

Token generated from comfydeploy.com -> https://www.comfydeploy.com/api-keys

COMFY_API_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidXNlcl8yckZteHBPQW9pVFFDdVRSOEd2WGY2SEFheEciLCJpYXQiOjE3NDY1MjMyMTEsIm9yZ19pZCI6Im9yZ18yYW00TGprUTVJYVdHUllNSHhHWGZIZEhjakEifQ.Quh3uT-kHa9U2k79e7ZmLsauH7_KiRdDvHXJQnv9kUA"
and the token for interacting with my POD_workflow
COMFY_DEPLOYMENT_ID_CUSTOM="c2ef10c6-0306-4164-9902-21986d335f02"
the app should let the user input an image and upload it as URL to be use as the logo. it should be also be able to input the prompt text default to this text Alone in the frame minimalist product shot of a Black baseball cap. and select a square size 512, 768, 1024 default 768

here is the workflow details
Deployment

production
/run/deployment/queue
POST
Send Request
Queue Run
Create a new deployment run with the given parameters.

Request Body
{
"deployment_id": "c2ef10c6-0306-4164-9902-21986d335f02",
"inputs": {
"input_number": 768,
"input_image": "/* put your image url here */",
"input_text": "Alone in the frame minimalist product shot of a Black jumper hoodie"
}
}
Schema Types
Name	Type	Default
inputs
object
{}
webhook
string
webhook_intermediate_status
boolean
false
gpu
string<T4 | L4 | A10G | L40S | A100 | A100-80GB | H100>
deployment_id
string

the app should be able to display the image after the user press generate button it should be able to get the response and display on the app

When you create the app please provide the step by step instructions to make an app like this and explain the process

here is the docs for comfy deploy

ComfyUI API

ComfyDeploy is the easiest way to deploy ComfyUI API.

You can do this by going to your deployment page while in a workflow (left hand side menu).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/deployments/page.png" alt="deployment page" width={600} />
</Frame>


Let's go through step by step

Workflow inputs

Workflow inputs are the inputs of your currenlty selected version.

<Note>
  Learn more about workflow inputs [here](/docs/v2/deployments/inputs).
</Note>

Deployments

Each workflow can have up to 2 deployments production and staging.

A deployment is a specific version of your workflow, connected to a machine. Identified by a deployment_id.

<Warning>
  If you change a machine that is already deployed, the deployment will be effected.


Make sure this is what you intend.
</Warning>

Calling your API

Follow the instructions in your workflows deployment page.

Workflow inputs

ComfyUI let's you connect nodes to each other when their input and output types match.

With Comfy Deploy you can expose inputs to your workflow by adding Comfy Deploy external nodes.

<Frame>
  <video src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/expose-prompt.mp4" autoplay="" loop playsinline="" />
</Frame>

Input custom node reference
<Note>
  If you have an input type that we don't support, please let us know in our [discord](https://discord.gg/ygb6VZwaMt) or create a PR in our [github](https://github.com/BennyKok/comfyui-deploy).
</Note>

External Boolean Input

Let's you expose a boolean input to your workflow.

Properties

input_id: Unique identifier for this input

default_value: The default boolean value

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-boolean.png" alt="External Boolean Node" width={500} />
</Frame>

External Checkpoint Input

Allows you to change the checkpoint model.

Properties

input_id: Unique identifier for this input (default: "input_checkpoint")

default_value: The default checkpoint model to use

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-checkpoint.png" alt="External Checkpoint Node" width={500} />
</Frame>

External Face Model Input

The External Face Model node is for the reactor face model node for ComfyUI Reactor

Properties

input_id: Unique identifier for this input (default: "input_reactor_face_model")

default_face_model_name: The default face model to use

face_model_save_name: Name to save downloaded face model as

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

face_model_url: Optional URL to download face model from

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-face-model.png" alt="External Face Model Node" width={500} />
</Frame>

External Image Input

The External Image node allows you to expose image inputs in your workflow. It supports loading images from URLs and base64 encoded data.

Properties

input_id: Unique identifier for this input (default: "input_image")

default_value: The default image to use if no input is provided

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-image.png" alt="External Image Node" width={500} />
</Frame>

External Image Alpha Input

The External Image Alpha node is an alternative image input node that allows you to expose image inputs to use the Alpha channel. It supports loading images from URLs and base64 encoded data, with improved alpha channel handling.

Properties

input_id: Unique identifier for this input (default: "input_image")

default_value: The default image to use if no input is provided

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-image-alpha.png" alt="External Image Alpha Node" width={500} />
</Frame>

External Image Batch Input

The External Image Batch node allows you to send multiple images as an input.
It supports loading images from URLs (including ZIP files containing images) and base64 encoded data.

<Note>
  This node is usually used with video workflows. Most likely you want to use External Image
</Note>

Properties

input_id: Unique identifier for this input (default: "input_images")

images: JSON array of image sources (URLs, ZIP files, or base64 data)

default_value: The default image to use if no input is provided

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-image-batch.png" alt="External Image Batch Node" width={500} />
</Frame>

External Lora Input

The External Lora node allows you to dynamically load LoRA models into your workflow.

Properties

input_id: Unique identifier for this input (default: "input_lora")

default_lora_name: The default LoRA model to use if no input is provided

lora_save_name: Name to save downloaded LoRA as (when loading from URL)

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

lora_url: Optional URL to download LoRA from

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-lora.png" alt="External Lora Node" width={500} />
</Frame>

External Number Input

The External Number node allows you to input numeric values.

Properties

input_id: Unique identifier for this input (default: "input_number")

default_value: The default number to use if no input is provided

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-number.png" alt="External Number Node" width={500} />
</Frame>

External Number Int Input

The External Number Int node allows you to input integer values.

Properties

input_id: Unique identifier for this input (default: "input_number")

default_value: The default integer to use if no input is provided (range: -2147483647 to 2147483647)

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-number-int.png" alt="External Number Int Node" width={500} />
</Frame>

External Number Slider Input

The External Number Slider node provides a slider interface for numeric input.

<Note>
  This will render a slider in the playground UI.
</Note>

Properties

input_id: Unique identifier for this input (default: "input_number_slider")

default_value: The default number to use if no input is provided (default: 0.5)

min_value: Minimum allowed value for the slider (default: 0)

max_value: Maximum allowed value for the slider (default: 1)

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-number-slider.png" alt="External Number Slider Node" width={500} />
</Frame>

External Text Input

The External Text Input node allows accepting text input.

Properties

input_id: Unique identifier for this input (default: "input_text")

default_value: The default text to use if no input is provided

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-text.png" alt="External Text Node" width={500} />
</Frame>

External Text Any

The External Text Any node is similar to External Text Input but can be connected to any type.

Useful for inputs that have string dropdowns. E.g. sampler for the Ksampler node.

<Warning>
  When connecting to an enum values, we will not be able to validate the input before runtime.
</Warning>

Properties

input_id: Unique identifier for this input (default: "input_text")

default_value: The default text to use if no input is provided

display_name: Optional friendly name to show in the UI

description: Optional description of what this input controls

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-text-any.png" alt="External Text Any Node" width={500} />
</Frame>

External Video Input X VHS

The External Video Input node allows accepting video files through the API or playground. It supports common video formats like MP4, WebM, MKV and GIF.

This is desigend to work with the Video Helper Suite nodes

Properties

input_id: Unique identifier for this input (default: "input_video")

default_value: The default video file to use if no input is provided

meta_batch: Optional batch processing configuration

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/comfydeploy/images/input-custom-nodes/external-video-vhs.png" alt="External Video Node" width={500} />
</Frame>
# Get Run

OpenAPI
paths:
  path: /run/{run_id}
  method: get
  servers:
    - url: https://api.comfydeploy.com/api
      description: Production server
    - url: https://staging.api.comfydeploy.com/api
      description: Staging server
    - url: http://localhost:3011/api
      description: Local development server
  request:
    security:
      - title: Bearer
        parameters:
          query: {}
          header:
            Authorization:
              type: http
              scheme: bearer
          cookie: {}
    parameters:
      path:
        run_id:
          schema:
            - type: string
              required: true
              title: Run Id
              format: uuid
      query: {}
      header: {}
      cookie: {}
    body: {}
    codeSamples:
      - label: SDK (TypeScript)
        lang: typescript
        source: |-
          import { ComfyDeploy } from "comfydeploy";

          const comfyDeploy = new ComfyDeploy({
            bearer: "<YOUR_BEARER_TOKEN_HERE>",
          });

          async function run() {
            const result = await comfyDeploy.run.get({
              runId: "b888f774-3e7c-4135-a18c-6b985523c4bc",
            });

            // Handle the result
            console.log(result);
          }

          run();
      - label: SDK (Python)
        lang: python
        source: |-
          from comfydeploy import ComfyDeploy


          with ComfyDeploy(
              bearer="<YOUR_BEARER_TOKEN_HERE>",
          ) as comfy_deploy:

              res = comfy_deploy.run.get(run_id="b888f774-3e7c-4135-a18c-6b985523c4bc")

              assert res.workflow_run_model is not None

              # Handle response
              print(res.workflow_run_model)
  response:
    '200':
      application/json:
        schemaArray:
          - type: object
            properties:
              id:
                allOf:
                  - type: string
                    format: uuid
                    title: Id
              workflow_version_id:
                allOf:
                  - anyOf:
                      - type: string
                        format: uuid
                      - type: 'null'
                    title: Workflow Version Id
              workflow_inputs:
                allOf:
                  - anyOf:
                      - {}
                      - type: 'null'
                    title: Workflow Inputs
              workflow_id:
                allOf:
                  - type: string
                    format: uuid
                    title: Workflow Id
              workflow_api:
                allOf:
                  - anyOf:
                      - {}
                      - type: 'null'
                    title: Workflow Api
              machine_id:
                allOf:
                  - anyOf:
                      - type: string
                        format: uuid
                      - type: 'null'
                    title: Machine Id
              origin:
                allOf:
                  - type: string
                    title: Origin
              status:
                allOf:
                  - type: string
                    title: Status
              ended_at:
                allOf:
                  - anyOf:
                      - type: string
                        format: date-time
                      - type: 'null'
                    title: Ended At
              created_at:
                allOf:
                  - type: string
                    format: date-time
                    title: Created At
              updated_at:
                allOf:
                  - type: string
                    format: date-time
                    title: Updated At
              queued_at:
                allOf:
                  - anyOf:
                      - type: string
                        format: date-time
                      - type: 'null'
                    title: Queued At
              started_at:
                allOf:
                  - anyOf:
                      - type: string
                        format: date-time
                      - type: 'null'
                    title: Started At
              gpu_event_id:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Gpu Event Id
              gpu:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Gpu
              machine_version:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Machine Version
              machine_type:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Machine Type
              modal_function_call_id:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Modal Function Call Id
              user_id:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: User Id
              org_id:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Org Id
              live_status:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Live Status
              progress:
                allOf:
                  - type: number
                    title: Progress
                    default: 0
              is_realtime:
                allOf:
                  - type: boolean
                    title: Is Realtime
                    default: false
              webhook:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Webhook
              webhook_status:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Webhook Status
              webhook_intermediate_status:
                allOf:
                  - type: boolean
                    title: Webhook Intermediate Status
                    default: false
              outputs:
                allOf:
                  - items:
                      $ref: '#/components/schemas/WorkflowRunOutputModel'
                    type: array
                    title: Outputs
                    default: []
              number:
                allOf:
                  - type: integer
                    title: Number
              duration:
                allOf:
                  - anyOf:
                      - type: number
                      - type: 'null'
                    title: Duration
              cold_start_duration:
                allOf:
                  - anyOf:
                      - type: number
                      - type: 'null'
                    title: Cold Start Duration
              cold_start_duration_total:
                allOf:
                  - anyOf:
                      - type: number
                      - type: 'null'
                    title: Cold Start Duration Total
              run_duration:
                allOf:
                  - anyOf:
                      - type: number
                      - type: 'null'
                    title: Run Duration
            title: WorkflowRunModel
            requiredProperties:
              - id
              - workflow_version_id
              - workflow_inputs
              - workflow_id
              - workflow_api
              - machine_id
              - origin
              - status
              - created_at
              - updated_at
              - gpu_event_id
              - gpu
              - machine_version
              - machine_type
              - modal_function_call_id
              - user_id
              - org_id
              - live_status
              - webhook
              - webhook_status
              - number
              - duration
              - cold_start_duration
              - cold_start_duration_total
              - run_duration
        examples:
          example:
            value:
              id: 3c90c3cc-0d44-4b50-8888-8dd25736052a
              workflow_version_id: 3c90c3cc-0d44-4b50-8888-8dd25736052a
              workflow_inputs: <any>
              workflow_id: 3c90c3cc-0d44-4b50-8888-8dd25736052a
              workflow_api: <any>
              machine_id: 3c90c3cc-0d44-4b50-8888-8dd25736052a
              origin: <string>
              status: <string>
              ended_at: '2023-11-07T05:31:56Z'
              created_at: '2023-11-07T05:31:56Z'
              updated_at: '2023-11-07T05:31:56Z'
              queued_at: '2023-11-07T05:31:56Z'
              started_at: '2023-11-07T05:31:56Z'
              gpu_event_id: <string>
              gpu: <string>
              machine_version: <string>
              machine_type: <string>
              modal_function_call_id: <string>
              user_id: <string>
              org_id: <string>
              live_status: <string>
              progress: 0
              is_realtime: false
              webhook: <string>
              webhook_status: <string>
              webhook_intermediate_status: false
              outputs: []
              number: 123
              duration: 123
              cold_start_duration: 123
              cold_start_duration_total: 123
              run_duration: 123
        description: Successful Response
    '422':
      application/json:
        schemaArray:
          - type: object
            properties:
              detail:
                allOf:
                  - items:
                      $ref: '#/components/schemas/ValidationError'
                    type: array
                    title: Detail
            title: HTTPValidationError
        examples:
          example:
            value:
              detail:
                - loc:
                    - <string>
                  msg: <string>
                  type: <string>
        description: Validation Error
  deprecated: false
  type: path
components:
  schemas:
    MediaItem:
      properties:
        url:
          type: string
          title: Url
        type:
          type: string
          title: Type
        filename:
          type: string
          title: Filename
        is_public:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Is Public
        subfolder:
          anyOf:
            - type: string
            - type: 'null'
          title: Subfolder
        upload_duration:
          anyOf:
            - type: number
            - type: 'null'
          title: Upload Duration
      type: object
      required:
        - url
        - type
        - filename
      title: MediaItem
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    WorkflowRunOutputModel:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        run_id:
          type: string
          format: uuid
          title: Run Id
        data:
          additionalProperties:
            items:
              anyOf:
                - $ref: '#/components/schemas/MediaItem'
                - type: string
                - type: boolean
            type: array
          type: object
          title: Data
        node_meta:
          anyOf:
            - {}
            - type: 'null'
          title: Node Meta
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        type:
          anyOf:
            - type: string
            - type: 'null'
          title: Type
        node_id:
          anyOf:
            - type: string
            - type: 'null'
          title: Node Id
      type: object
      required:
        - id
        - run_id
        - data
        - node_meta
        - created_at
        - updated_at
      title: WorkflowRunOutputModel

Queue Run

Create a new deployment run with the given parameters.

OpenAPI
paths:
  path: /run/deployment/queue
  method: post
  servers:
    - url: https://api.comfydeploy.com/api
      description: Production server
    - url: https://staging.api.comfydeploy.com/api
      description: Staging server
    - url: http://localhost:3011/api
      description: Local development server
  request:
    security:
      - title: Bearer
        parameters:
          query: {}
          header:
            Authorization:
              type: http
              scheme: bearer
          cookie: {}
    parameters:
      path: {}
      query: {}
      header: {}
      cookie: {}
    body:
      application/json:
        schemaArray:
          - type: object
            properties:
              inputs:
                allOf:
                  - additionalProperties:
                      anyOf:
                        - type: string
                        - type: integer
                        - type: number
                        - type: boolean
                        - items: {}
                          type: array
                    type: object
                    title: Inputs
                    description: The inputs to the workflow
                    default: {}
                    example:
                      prompt: A beautiful landscape
                      seed: 42
              webhook:
                allOf:
                  - type: string
                    title: Webhook
              webhook_intermediate_status:
                allOf:
                  - type: boolean
                    title: Webhook Intermediate Status
                    default: false
                    example: true
              gpu:
                allOf:
                  - type: string
                    enum:
                      - T4
                      - L4
                      - A10G
                      - L40S
                      - A100
                      - A100-80GB
                      - H100
                    description: The GPU to override the machine's default GPU
              deployment_id:
                allOf:
                  - type: string
                    format: uuid
                    title: Deployment Id
                    examples:
                      - 15e79589-12c9-453c-a41a-348fdd7de957
            required: true
            title: DeploymentRunRequest
            examples:
              - deployment_id: 12345678-1234-5678-1234-567812345678
                inputs: &ref_0
                  num_inference_steps: 30
                  prompt: A futuristic cityscape
                  seed: 123456
                webhook: https://myapp.com/webhook
            requiredProperties:
              - deployment_id
            example:
              deployment_id: 12345678-1234-5678-1234-567812345678
              inputs: *ref_0
              webhook: https://myapp.com/webhook
        examples:
          example:
            value:
              deployment_id: 12345678-1234-5678-1234-567812345678
              inputs:
                num_inference_steps: 30
                prompt: A futuristic cityscape
                seed: 123456
              webhook: https://myapp.com/webhook
    codeSamples:
      - label: SDK (TypeScript)
        lang: typescript
        source: |-
          import { ComfyDeploy } from "comfydeploy";

          const comfyDeploy = new ComfyDeploy({
            bearer: "<YOUR_BEARER_TOKEN_HERE>",
          });

          async function run() {
            const result = await comfyDeploy.run.deployment.queue({
              inputs: {
                "prompt": "A beautiful landscape",
                "seed": 42,
              },
              webhook: "https://myapp.com/webhook",
              deploymentId: "15e79589-12c9-453c-a41a-348fdd7de957",
            });

            // Handle the result
            console.log(result);
          }

          run();
      - label: SDK (Python)
        lang: python
        source: |-
          from comfydeploy import ComfyDeploy


          with ComfyDeploy(
              bearer="<YOUR_BEARER_TOKEN_HERE>",
          ) as comfy_deploy:

              res = comfy_deploy.run.deployment.queue(request={
                  "inputs": {
                      "prompt": "A beautiful landscape",
                      "seed": 42,
                  },
                  "webhook": "https://myapp.com/webhook",
                  "deployment_id": "15e79589-12c9-453c-a41a-348fdd7de957",
              })

              assert res.create_run_response is not None

              # Handle response
              print(res.create_run_response)
  response:
    '200':
      application/json:
        schemaArray:
          - type: object
            properties:
              run_id:
                allOf:
                  - type: string
                    format: uuid
                    title: Run Id
                    description: >-
                      The ID of the run, use this to get the run status and
                      outputs
            title: CreateRunResponse
            requiredProperties:
              - run_id
        examples:
          example:
            value:
              run_id: 3c90c3cc-0d44-4b50-8888-8dd25736052a
        description: Successful Response
    '422':
      application/json:
        schemaArray:
          - type: object
            properties:
              detail:
                allOf:
                  - items:
                      $ref: '#/components/schemas/ValidationError'
                    type: array
                    title: Detail
            title: HTTPValidationError
        examples:
          example:
            value:
              detail:
                - loc:
                    - <string>
                  msg: <string>
                  type: <string>
        description: Validation Error
  deprecated: false
  type: path
components:
  schemas:
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Yaml post /run/deployment/queue
IGNORE_WHEN_COPYING_END
Cancel Run
OpenAPI
paths:
  path: /run/{run_id}/cancel
  method: post
  servers:
    - url: https://api.comfydeploy.com/api
      description: Production server
    - url: https://staging.api.comfydeploy.com/api
      description: Staging server
    - url: http://localhost:3011/api
      description: Local development server
  request:
    security:
      - title: Bearer
        parameters:
          query: {}
          header:
            Authorization:
              type: http
              scheme: bearer
          cookie: {}
    parameters:
      path:
        run_id:
          schema:
            - type: string
              required: true
              title: Run Id
      query: {}
      header: {}
      cookie: {}
    body: {}
    codeSamples:
      - label: SDK (TypeScript)
        lang: typescript
        source: |-
          import { ComfyDeploy } from "comfydeploy";

          const comfyDeploy = new ComfyDeploy({
            bearer: "<YOUR_BEARER_TOKEN_HERE>",
          });

          async function run() {
            const result = await comfyDeploy.run.cancel({
              runId: "<id>",
            });

            // Handle the result
            console.log(result);
          }

          run();
      - label: SDK (Python)
        lang: python
        source: |-
          from comfydeploy import ComfyDeploy


          with ComfyDeploy(
              bearer="<YOUR_BEARER_TOKEN_HERE>",
          ) as comfy_deploy:

              res = comfy_deploy.run.cancel(run_id="<id>")

              assert res.any is not None

              # Handle response
              print(res.any)
  response:
    '200':
      application/json:
        schemaArray:
          - type: any
        examples:
          example:
            value: <any>
        description: Successful Response
    '422':
      application/json:
        schemaArray:
          - type: object
            properties:
              detail:
                allOf:
                  - items:
                      $ref: '#/components/schemas/ValidationError'
                    type: array
                    title: Detail
            title: HTTPValidationError
        examples:
          example:
            value:
              detail:
                - loc:
                    - <string>
                  msg: <string>
                  type: <string>
        description: Validation Error
  deprecated: false
  type: path
components:
  schemas:
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Yaml post /run/{run_id}/cancel
IGNORE_WHEN_COPYING_END
Run Update
OpenAPI
paths:
  path: '{$request.body#/webhook}'
  method: post
  servers:
    - url: https://api.comfydeploy.com/api
      description: Production server
    - url: https://staging.api.comfydeploy.com/api
      description: Staging server
    - url: http://localhost:3011/api
      description: Local development server
  request:
    security: []
    parameters:
      path: {}
      query: {}
      header: {}
      cookie: {}
    body:
      application/json:
        schemaArray:
          - type: object
            properties:
              run_id:
                allOf:
                  - type: string
                    title: Run Id
              status:
                allOf:
                  - $ref: '#/components/schemas/WorkflowRunStatus'
              live_status:
                allOf:
                  - anyOf:
                      - type: string
                      - type: 'null'
                    title: Live Status
              progress:
                allOf:
                  - type: number
                    title: Progress
                    default: 0
              outputs:
                allOf:
                  - items:
                      $ref: '#/components/schemas/WorkflowRunOutputModel'
                    type: array
                    title: Outputs
                    default: []
            required: true
            title: WorkflowRunWebhookBody
            description: The updated run information
            requiredProperties:
              - run_id
              - status
              - live_status
        examples:
          example:
            value:
              run_id: <string>
              status: not-started
              live_status: <string>
              progress: 0
              outputs: []
  response:
    '200':
      application/json:
        schemaArray:
          - type: object
            properties:
              status:
                allOf:
                  - type: string
                    title: Status
            title: WorkflowRunWebhookResponse
            requiredProperties:
              - status
        examples:
          example:
            value:
              status: <string>
        description: Successful Response
    '422':
      application/json:
        schemaArray:
          - type: object
            properties:
              detail:
                allOf:
                  - items:
                      $ref: '#/components/schemas/ValidationError'
                    type: array
                    title: Detail
            title: HTTPValidationError
        examples:
          example:
            value:
              detail:
                - loc:
                    - <string>
                  msg: <string>
                  type: <string>
        description: Validation Error
  deprecated: false
  type: webhook
components:
  schemas:
    MediaItem:
      properties:
        url:
          type: string
          title: Url
        type:
          type: string
          title: Type
        filename:
          type: string
          title: Filename
        is_public:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Is Public
        subfolder:
          anyOf:
            - type: string
            - type: 'null'
          title: Subfolder
        upload_duration:
          anyOf:
            - type: number
            - type: 'null'
          title: Upload Duration
      type: object
      required:
        - url
        - type
        - filename
      title: MediaItem
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    WorkflowRunOutputModel:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        run_id:
          type: string
          format: uuid
          title: Run Id
        data:
          additionalProperties:
            items:
              anyOf:
                - $ref: '#/components/schemas/MediaItem'
                - type: string
                - type: boolean
            type: array
          type: object
          title: Data
        node_meta:
          anyOf:
            - {}
            - type: 'null'
          title: Node Meta
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        type:
          anyOf:
            - type: string
            - type: 'null'
          title: Type
        node_id:
          anyOf:
            - type: string
            - type: 'null'
          title: Node Id
      type: object
      required:
        - id
        - run_id
        - data
        - node_meta
        - created_at
        - updated_at
      title: WorkflowRunOutputModel
    WorkflowRunStatus:
      type: string
      enum:
        - not-started
        - running
        - uploading
        - success
        - failed
        - started
        - queued
        - timeout
        - cancelled
      title: WorkflowRunStatus
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Yaml webhook {$request.body#/webhook}
IGNORE_WHEN_COPYING_END
Get Started
Overview

Install the TS client

bun i comfydeploy
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

For example setting up the ts client, get your api key here

import { ComfyDeploy } from "comfydeploy";

export const cd = new ComfyDeploy({
    bearer: "<api-key>",
});
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Typescript client.ts
IGNORE_WHEN_COPYING_END

Running any workflow as API, for more types definitions see here

<Tabs>
  <Tab title="Queue Run">
    When using queue run, an run id is returned immediately, which you can later use to check the status of the run or get the output.
    Webhook callback is suggested making sure you have a way to receive the response.

```typescript
const run = await cd.run.deployment.queue({
  deploymentId: "<deployment-id>",
  inputs: {
    prompt: "A beautiful landscape",
  },
  webhook: "<your domain>/webhook"
})

// run.runId
```
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
  </Tab>


{/* <Tab title="Sync">
Return the output data directly, becareful of your backend's timeout.
```typescript
const outputs = await cd.run.sync({
deploymentId: "<deployment-id>",
inputs: {
prompt: "A beautiful landscape",
},
webhook: "<your domain>/webhook"
})

// outputs[0].data.images[0].url
  ```
</Tab>

<Tab title="Stream">
  Streaming directly the execution status with logs, and eventually output data
  ```typescript
  const stream = await cd.run.stream({
    deploymentId: selectedDeployment.id,
    inputs: inputValues,
  });

  for await (const chunk of stream) {
    if (chunk.event === "log_update") {
      setLog((prevLog) => [...prevLog, chunk.data.logs]);
    } else if (chunk.event === "event_update") {
      const comfyEvent = chunk.data;
      if (comfyEvent.event === "output_ready") {
        addOutput(comfyEvent.data); // Add new output to the store
      }
    }
  }
  ```
</Tab> */}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
</Tabs>

Getting your workflow on to the platform
<CardGroup cols={2}>
  <Card title="Import Workflow" icon="file-import" href="/v2/workflows/import">
    Import a workflow from a JSON file
  </Card>

  <Card title="Deploy Workflow" icon="cloud" href="/v2/deployments/create">
    Deploy your workflow
  </Card>
</CardGroup>


Comfy Deploy home pagelight logo
v2
Discord
Blog
Dashboard
Search...

API

Deployments
ComfyUI API
Workflow inputs
Endpoints
GET
Get Run
POST
Queue Run
POST
Cancel Run
Webhooks
HOOK
Run Update
Next JS
Get Started
Callbacks
Callbacks

Copy page

Callbacks are how you can get notified when a workflow is done

​
Overview
In your nextjs server side, where you run your endpoint, you can queue a run and pass a webhook url to it.

demo2
Full Stack Demo
See how the callback works in a NextJS app

src/app/api/run/route.tsx

Copy
import { cd } from "client";

export async function POST(request: Request) {
const { deploymentId } = await request.json();

const headersList = headers();
const host = headersList.get("host") || "";
const protocol = headersList.get("x-forwarded-proto") || "";
let endpoint = `${protocol}://${host}`;

const { runId } = await cd.run.deployment.queue({
    deploymentId: deploymentId,
    webhook: `${endpoint}/api/webhook`,
});
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

}
Make sure you have a route that can handle the webhook. For the response body, check the docs here

src/app/api/webhook/route.tsx

Copy
import { WorkflowRunWebhookBody$inboundSchema as WebhookParser } from "comfydeploy/models/components";
import { NextResponse } from "next/server";

export async function POST(request: Request) {
const parseData = WebhookParser.safeParse(
await request.json(),
);

if (!parseData.success) {
  return NextResponse.json({ message: "error" }, { status: 400 });
}

const data = parseData.data;

const { status, runId, outputs } = data;

// Do your things
console.log(status, runId, outputs);

// Return success to ComfyDeploy
return NextResponse.json({ message: "success" }, { status: 200 });
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

}
​
Enforcing Webhook Security
To enhance the security of your webhook endpoint, you can implement a secret token verification using the jose library, which is compatible with edge environments. This method uses a shared secret to generate and verify signatures for each webhook request.

Here’s how to modify your code to include this security measure:

src/app/api/run/route.tsx

Copy
import * as jose from 'jose';
import { cd } from "client";

const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET; // Store this securely, e.g., in environment variables

export async function POST(request: Request) {
// ... existing code ...

const timestamp = Date.now().toString();
const secret = new TextEncoder().encode(WEBHOOK_SECRET);
const signature = await new jose.SignJWT({ deploymentId })
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt(timestamp)
    .sign(secret);

const { runId } = await client.run.queue({
    deploymentId: deploymentId,
    webhook: `${endpoint}/api/webhook?timestamp=${timestamp}&signature=${encodeURIComponent(signature)}`,
});
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

}
Then, update your webhook handler to verify the signature:

src/app/api/webhook/route.tsx

Copy
import { WorkflowRunWebhookBody$inboundSchema as WebhookParser } from "comfydeploy/models/components";
import { NextResponse } from "next/server";
import * as jose from 'jose';

const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET;
const MAX_TIMESTAMP_DIFF = 60 * 60 * 1000; // 1 hour

export async function POST(request: Request) {
const url = new URL(request.url);
const timestamp = url.searchParams.get('timestamp');
const signature = url.searchParams.get('signature');

if (!timestamp || !signature) {
    return NextResponse.json({ message: "Missing query parameters" }, { status: 400 });
}

// Check if the timestamp is recent
if (Math.abs(Date.now() - parseInt(timestamp)) > MAX_TIMESTAMP_DIFF) {
    return NextResponse.json({ message: "Timestamp too old" }, { status: 400 });
}

// const body = await request.json();
const secret = new TextEncoder().encode(WEBHOOK_SECRET);

try {
    const { payload } = await jose.jwtVerify(signature, secret, {
        algorithms: ['HS256'],
    });

    if (payload.deploymentId !== body.deploymentId) {
        throw new Error('Deployment ID mismatch');
    }

    if (payload.iat !== parseInt(timestamp)) {
        throw new Error('Timestamp mismatch');
    }
} catch (error) {
    return NextResponse.json({ message: "Invalid signature" }, { status: 401 });
}

const parseData = WebhookParser.safeParse(
  await request.json(),
);

if (!parseData.success) {
  return NextResponse.json({ message: "error" }, { status: 400 });
}

const data = parseData.data;

const { status, runId, outputs } = data;

// Do your things
console.log(status, runId, outputs);

// Return success to ComfyDeploy
return NextResponse.json({ message: "success" }, { status: 200 });
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

}
Was this page helpful?

Yes

No
Get Started
discord
github
Powered by Mintlify
On this page
Overview
Enforcing Webhook Security
Callbacks - Comfy Deploy

